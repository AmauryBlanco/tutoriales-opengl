#version 330 core

out vec4 color;

in vec3 N1;
in vec3 V1;
in vec3 P;

uniform mat4 mv_matrix;
uniform vec3 light_pos; 
uniform vec3 light_color = vec3(0.75, 0.75, 0.75);
uniform vec3 ambient_color = vec3(0.1);

uniform float ka = 0.10;
uniform float kd = 0.55;
uniform float ks = 0.80;
uniform float n = 32;

const float k0 = 1.0; //constant attenuation
const float k1 = 0.0; //linear attenuation
const float k2 = 0.0; //quadratic attenuation

uniform vec3 spot_direction;
uniform float spot_cutoff = 0.8;
uniform float spot_exponent = 0.1;

void main()
{
	// point light
	vec3 light_position = (mv_matrix * vec4(light_pos, 1)).xyz;
	vec3 L1 = light_position - P;
	float d = length(L1);

	// Normalize the incoming N, L, and V vectors
	vec3 N = normalize(N1);
	vec3 L = normalize(L1);
	vec3 V = normalize(V1);

	// spot light
	vec3 D = normalize(spot_direction);
	float spotEffect = dot(-L, D);

	if(spotEffect > spot_cutoff) {
		spotEffect = pow(spotEffect, spot_exponent);
	
		// Calculate R by reflecting -L around the plane defined by N
		vec3 R = reflect(-L, N);
	
		// Calculate ambient, difusse, specular contribution
		vec3 ambient  = ka * ambient_color;
		vec3 diffuse  = kd * light_color * max(0.0, dot(N, L));
		vec3 specular = ks * light_color * pow(max(0.0, dot(R, V)), n);

		float attenuationAmount = spotEffect / (k0 + (k1*d) + (k2*d*d));

		ambient  *= attenuationAmount;
		diffuse  *= attenuationAmount;
		specular *= attenuationAmount;

		// Send the color output to the fragment shader
		vec3 frag_color = ambient + diffuse + specular;
		color = vec4(frag_color, 1.0);
	}
} 
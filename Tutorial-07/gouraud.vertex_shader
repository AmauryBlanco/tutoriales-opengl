#version 330 core

layout (location = 0) in vec4 position;
layout (location = 1) in vec2 texture;
layout (location = 2) in vec3 normal;

uniform mat4 mv_matrix;
uniform mat4 view_matrix;
uniform mat4 proj_matrix;

uniform vec3 light_pos = vec3(0.0, 3.0, -3.0);  
uniform vec3 light_color = vec3(0.75, 0.75, 0.75);
uniform vec3 ambient_color = vec3(0.1);

uniform float ka = 0.10;
uniform float kd = 0.55;
uniform float ks = 0.70;
uniform float n = 32;

out vec3 color;

void main()
{
	// Calculate view-space coordinate
	vec4 P = mv_matrix * position;

	// Calculate normal in view space
	vec3 N = normalize(mat3(mv_matrix) * normal);
	
	// Calculate view-space light vector
	vec3 L = normalize(light_pos - P.xyz);
	
	// Calculate view vector (simply the negative of the view-space position)
	vec3 V = normalize(-P.xyz);
	
	// Calculate R by reflecting -L around the plane defined by N
	vec3 R = reflect(-L, N);
	
    // Calculate ambient, difusse, specular contribution
	vec3 ambient  = ka * ambient_color;
	vec3 diffuse  = kd * light_color * max(0.0, dot(N, L));
	vec3 specular = ks * light_color * pow(max(0.0, dot(R, V)), n);
	
	// Send the color output to the fragment shader
	color = ambient + diffuse + specular;
	
	// Calculate the clip-space position of each vertex
	gl_Position = proj_matrix * P;
}